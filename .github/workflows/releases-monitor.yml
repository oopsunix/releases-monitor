name: ü§ñ Releases Monitor

on:
  schedule:
    - cron: '0 */6 * * *'    # ÊØè 6 Â∞èÊó∂Ê£ÄÊü•‰∏ÄÊ¨°
  workflow_dispatch:         # ÂÖÅËÆ∏ÊâãÂä®Ëß¶Âèë

permissions:
  contents: write

jobs:
  notify:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Ensure repos.json
      run: |
        [[ -f repos.json ]] || echo '{}' > repos.json

    - name: Install jq
      run: sudo apt-get -qq update && sudo apt-get -qq install -y jq

    - name: Scan repositories
      id: scan
      run: |
        changed=false
        notice=""
        repos=$(jq -r 'keys[]' repos.json)
        for repo in $repos; do
          echo "==> $repo"
          api="https://api.github.com/repos/${repo}/releases/latest"
          json=$(curl -sL "$api" -H "Authorization: Bearer ${{ github.token }}")
          tag=$(jq -r '.tag_name // empty' <<< "$json")
          url=$(jq -r '.html_url // empty' <<< "$json")
          if [[ -z "$tag" ]]; then
            echo "   ‚Ü≥ no releases"; continue
          fi

          last=$(jq -r --arg repo "$repo" '.[$repo] // empty' repos.json)
          if [[ "$tag" != "$last" ]]; then
            echo "   ‚Ü≥ NEW $tag"
            changed=true
            notice="${notice}\nüì¢ ${repo} ÂèëÂ∏ÉÊñ∞ÁâàÊú¨Ôºö${tag}\nüëâ ${url}\n"
            tmp=$(mktemp)
            jq --arg repo "$repo" --arg tag "$tag" '.[$repo]=$tag' repos.json > "$tmp" && mv "$tmp" repos.json
          else
            echo "   ‚Ü≥ up-to-date ($tag)"
          fi
        done
        echo -e "$notice" > notice.txt
        echo "changed=$changed" >> $GITHUB_OUTPUT

    - name: Send message to Telegram
      if: steps.scan.outputs.changed == 'true'
      env:
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
      run: |
        UPDATES=$(cat notice.txt)
        
        MESSAGE="üîî ÁâàÊú¨ÂèëÂ∏ÉÈÄöÁü•

        $UPDATES

        ‚è∞ Time: $(date '+%H:%M:%S %d/%m/%Y')
        üîó Link: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        
        if [ ! -z "$TELEGRAM_BOT_TOKEN" ] && [ ! -z "$TELEGRAM_CHAT_ID" ]; then
          curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
            -d chat_id="$TELEGRAM_CHAT_ID" \
            -d text="$MESSAGE" \
            -d parse_mode="HTML" || echo "‚ùå Failed to send Telegram notification."
        else
          echo "‚ö†Ô∏è No configuration Telegram parameters, skip notifications."
        fi

    - name: Commit new state
      if: steps.scan.outputs.changed == 'true'
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git add repos.json
        git commit -m "bot: update release state"
        git push
